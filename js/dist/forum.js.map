{"version":3,"file":"forum.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;AACA;AAIe,SAASM,sBAAT,GAAkC;EAC/CH,mFAAA,GAAwBD,oEAAA,CAAgB,QAAhB,CAAxB;EACAC,uFAAA,GAA4BD,oEAAA,CAAgB,aAAhB,CAA5B;EAEAD,4DAAM,CAACG,sFAAD,EAAwB,aAAxB,EAAuC,UAAUO,KAAV,EAAgC;IAC3E,IAAMH,MAAM,GAAG,KAAKI,KAAL,CAAWC,IAAX,CAAgBL,MAAhB,EAAf;IACA,IAAME,UAAU,GAAG,KAAKE,KAAL,CAAWC,IAAX,CAAgBH,UAAhB,EAAnB;;IAEA,IAAI,CAACF,MAAL,EAAa;MACX;IACD;;IAED,IAAMM,WAAW,GAAGd,wEAAA,CAAqB,gDAArB,CAApB;IACA,IAAMiB,SAAS,GAAG,eAAlB;IAEA,IAAIC,OAAJ;;IAEA,IAAIV,MAAM,KAAK,uBAAX,IAAsC,CAACE,UAA3C,EAAuD;MACrDQ,OAAO,GAAG;QAAM,SAAS,EAAED;MAAjB,GAA6BH,WAA7B,CAAV;IACD,CAFD,MAEO;MACLI,OAAO,GACL,EAAC,yEAAD;QAAS,IAAI,EAAER;MAAf,GACE;QAAM,SAAS,EAAEO;MAAjB,GAA6BH,WAA7B,CADF,CADF;IAKD;;IAEDH,KAAK,CAACQ,GAAN,CAAU,QAAV,EAAoBD,OAApB,EAA6B,EAA7B;EACD,CAxBK,CAAN;AAyBD;;;;;;;;;;;;;;;ACvCD;AACA;AAEAlB,wEAAA,CAAqB,wBAArB,EAA+C,YAAM;EACnDM,8EAAsB;AACvB,CAFD;;;;;;;;;;;ACHA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA;WACA,iCAAiC,WAAW;WAC5C;WACA;;;;;WCPA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D","sources":["webpack://@blomstra/conversations/./src/forum/extend/addPostSourceToCommentPost.tsx","webpack://@blomstra/conversations/./src/forum/index.ts","webpack://@blomstra/conversations/external root \"flarum.core.compat['common/Model']\"","webpack://@blomstra/conversations/external root \"flarum.core.compat['common/components/Tooltip']\"","webpack://@blomstra/conversations/external root \"flarum.core.compat['common/extend']\"","webpack://@blomstra/conversations/external root \"flarum.core.compat['common/models/Post']\"","webpack://@blomstra/conversations/external root \"flarum.core.compat['forum/app']\"","webpack://@blomstra/conversations/external root \"flarum.core.compat['forum/components/CommentPost']\"","webpack://@blomstra/conversations/webpack/bootstrap","webpack://@blomstra/conversations/webpack/runtime/compat get default export","webpack://@blomstra/conversations/webpack/runtime/define property getters","webpack://@blomstra/conversations/webpack/runtime/hasOwnProperty shorthand","webpack://@blomstra/conversations/webpack/runtime/make namespace object","webpack://@blomstra/conversations/./forum.js"],"sourcesContent":["import app from 'flarum/forum/app';\nimport { extend } from 'flarum/common/extend';\nimport Model from 'flarum/common/Model';\nimport Post from 'flarum/common/models/Post';\nimport ItemList from 'flarum/common/utils/ItemList';\nimport CommentPost from 'flarum/forum/components/CommentPost';\nimport Tooltip from 'flarum/common/components/Tooltip';\n\nimport type Mithril from 'mithril';\n\nexport default function addSourceToCommentPost() {\n  Post.prototype.source = Model.attribute('source');\n  Post.prototype.sourceData = Model.attribute('source_data');\n\n  extend(CommentPost.prototype, 'headerItems', function (items: ItemList<any>) {\n    const source = this.attrs.post.source();\n    const sourceData = this.attrs.post.sourceData();\n\n    if (!source) {\n      return;\n    }\n\n    const displayText = app.translator.trans('blomstra-conversations-email.forum.post.source');\n    const className = 'PostedByEmail';\n\n    let element;\n\n    if (source === 'blomstra-post-by-mail' && !sourceData) {\n      element = <span className={className}>{displayText}</span>;\n    } else {\n      element = (\n        <Tooltip text={sourceData}>\n          <span className={className}>{displayText}</span>\n        </Tooltip>\n      );\n    }\n\n    items.add('source', element, 90);\n  });\n}\n","import app from 'flarum/forum/app';\nimport addSourceToCommentPost from './extend/addPostSourceToCommentPost';\n\napp.initializers.add('blomstra/conversations', () => {\n  addSourceToCommentPost();\n});\n","module.exports = flarum.core.compat['common/Model'];","module.exports = flarum.core.compat['common/components/Tooltip'];","module.exports = flarum.core.compat['common/extend'];","module.exports = flarum.core.compat['common/models/Post'];","module.exports = flarum.core.compat['forum/app'];","module.exports = flarum.core.compat['forum/components/CommentPost'];","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","export * from './src/forum';\n"],"names":["app","extend","Model","Post","CommentPost","Tooltip","addSourceToCommentPost","prototype","source","attribute","sourceData","items","attrs","post","displayText","translator","trans","className","element","add","initializers"],"sourceRoot":""}